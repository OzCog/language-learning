#!/usr/bin/env python

# ASuMa, Mar 2018
# Read parse data in MST-parser format, from reference and test files
# and evaluate the accuracy of the test parses.
# See main() documentation below for usage details

import platform
import getopt
import sys
import os
import logging
import traceback

from ull.common import handle_path_string, strip_quotes, setup_logging, VERBOSITY_OPTIONS
from ull.grammar_tester import compare_ull_files, EvalError
from ull.parse_evaluator import Evaluate_Alternative


def main(argv):
    """
        Evaluates parses compared to given gold standard (GS).
        For each parse, loops through all links in GS and checks if those
        2 word-instances are also connected in parse to evaluate.

        Parses must be in format:
        Sentence to evaluate
        # word1 # word2
        # word2 # word3
        ...

        Another sentence to evaluate
        # word1 # word2
        ...

        Usage: parse_evaluator -r <reffile> [-t <testfile>] [-v] [-i] [-s] [-z] [-a]

        testfile        file with parses to evaluate
        goldfile        file with reference (gold standard) parses
        -v              Verbosity level options: [none, debug, info, warning, error, critical]
        -i              ignore LEFT-WALL and end-of-sentence dot, if any
        -a              use alternative parse_evaluator
        -s              evaluate sequential parses (only in alternative evaluator)
        -z              evaluate random parses (only in alternative evaluator)
        -f              filter sentences not matching in ref and test, or have internal dialogue (only in alternative)

    """
    test_file = ''
    ref_file = ''
    verbose = False
    verbosity_level = logging.WARNING
    ignore_wall = False
    sequential = False
    random = False
    alternative_parser = False
    filter_sentences = False

    try:
        app_name = str(os.path.split(__file__)[1]).split(".")[0]

        opts, args = getopt.getopt(argv, "ht:r:v:iszaf", ["test=", "reference=", "verbosity=", "ignore", "sequential",
                                                         "random", "alternative", "filter"])

        for opt, arg in opts:
            if opt == '-h':
                print("Usage: ./parse_evaluator.py -r <reffile> -t <testfile> [-v] [-i] [-s] [-z] [-a] [-f]")
                sys.exit()
            elif opt in ("-t", "--test"):
                test_file = arg
            elif opt in ("-r", "--reference"):
                ref_file = arg
            elif opt in ("-v", "--verbosity"):
                verb_key = strip_quotes(arg)

                if verb_key not in VERBOSITY_OPTIONS.keys():
                    raise getopt.GetoptError("Wrong verbosity argument value: ()".format(verb_key))

                verbosity_level = VERBOSITY_OPTIONS[verb_key]
                verbose = verbosity_level < logging.WARNING
            elif opt in ("-i", "--ignore"):
                ignore_wall = True
            elif opt in ("-s", "--sequential"):
                sequential = True
            elif opt in ("-z", "--random"):
                random = True
            elif opt in ("-a", "--alternative"):
                alternative_parser = True
            elif opt in ("-f", "--filter"):
                filter_sentences = True

    except getopt.GetoptError:
        print("Usage: ./parse_evaluator.py -r <reffile> [-t <testfile>] [-v] [-i] [-s] [-z] [-a] [-f]")
        sys.exit(2)


    setup_logging(verbosity_level, logging.NOTSET, os.environ["PWD"] + "/" + app_name + ".log", "w")

    logger = logging.getLogger(app_name)

    logger.info("Code writen for Python3.6.4. Using: %s" % platform.python_version())

    try:
        # Check if the arguments are properly specified.
        if ref_file is None or len(ref_file) == 0:
            logger.info(main.__doc__)
            raise EvalError("Error: Arguments are not properly specified.")

        # If reference file does not exist then there is nothing to compare.
        if not os.path.isfile(ref_file):
            raise EvalError("Error: File '" + ref_file + "' does not exist.")

        # Check if the arguments are properly specified.
        if test_file is None or len(test_file) == 0:
            print(main.__doc__)
            raise EvalError("Error: Incorrect test_file.")

        if alternative_parser:
            Evaluate_Alternative(ref_file, test_file, verbose, ignore_wall, sequential, random, filter_sentences)

        else:
            compare_ull_files(test_file, ref_file, verbose, ignore_wall)

    except EvalError as err:
        logger.critical(str(err))
        logger.debug(traceback.print_exc())
        return 3

    except KeyboardInterrupt:
        logger.warning("Ctrl+C triggered. User abort.")
        logger.debug(traceback.print_exc())
        return 4

    except Exception as err:
        logger.critical(str(type(err)) + ": " + str(err))
        logger.debug(traceback.print_exc())
        return 5

    return 0


if __name__ == '__main__':
    main(sys.argv[1:])
